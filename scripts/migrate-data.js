// Áí∞Â¢ÉÂ§âÊï∞„ÇíË™≠„ÅøËæº„Åø
require('dotenv').config({ path: '.env.local' });

// scripts/migrate-data.js
// Êó¢Â≠ò„ÅÆJSON„Éï„Ç°„Ç§„É´„Åã„ÇâSupabase„Å∏„Éá„Éº„Çø„ÇíÁßªË°å„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà

const fs = require('fs').promises;
const path = require('path');
const { createClient } = require('@supabase/supabase-js');

// SupabaseË®≠ÂÆöÔºàÁí∞Â¢ÉÂ§âÊï∞„Åã„ÇâÂèñÂæóÔºâ
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå SupabaseÁí∞Â¢ÉÂ§âÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
  console.log('ÂøÖË¶Å„Å™Áí∞Â¢ÉÂ§âÊï∞:');
  console.log('- NEXT_PUBLIC_SUPABASE_URL');
  console.log('- SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function migrateData() {
  console.log('üöÄ „Éá„Éº„ÇøÁßªË°å„ÇíÈñãÂßã„Åó„Åæ„Åô...');

  try {
    // 0. „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„ÉÜ„Çπ„Éà
    await testDatabaseConnection();
    
    // 1. ÂïÜÂìÅ„Éá„Éº„Çø„ÅÆÁßªË°å
    await migrateProducts();
    
    // 2. ASIN„Éá„Éº„Çø„ÅÆÁßªË°å
    await migrateAsinData();
    
    console.log('‚úÖ „Éá„Éº„ÇøÁßªË°å„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ');
  } catch (error) {
    console.error('‚ùå „Éá„Éº„ÇøÁßªË°å‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error);
    process.exit(1);
  }
}

async function testDatabaseConnection() {
  console.log('\nüîç „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Çí„ÉÜ„Çπ„Éà‰∏≠...');
  
  try {
    // shops„ÉÜ„Éº„Éñ„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç
    const { data, error } = await supabase
      .from('shops')
      .select('id')
      .limit(1);
    
    if (error) {
      if (error.code === '42P01') {
        console.error('‚ùå „ÉÜ„Éº„Éñ„É´„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì:', error.message);
        console.log('\nüìã Ëß£Ê±∫ÊñπÊ≥ï:');
        console.log('1. ‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„Åß„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÂÆüË°å„Çπ„ÇØ„É™„Éó„Éà„ÇíËµ∑Âãï:');
        console.log('   npm run run-migrations');
        console.log('2. Ë°®Á§∫„Åï„Çå„ÇãÊâãÈ†Ü„Å´Âæì„Å£„Å¶Supabase„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Åß„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„ÇíÂÆüË°å');
        console.log('3. „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÂÆå‰∫ÜÂæå„ÄÅÂÜçÂ∫¶„Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÇíÂÆüË°å');
        throw new Error('„Éá„Éº„Çø„Éô„Éº„Çπ„Çπ„Ç≠„Éº„Éû„Åå‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ‰∏äË®ò„ÅÆÊâãÈ†Ü„Å´Âæì„Å£„Å¶„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      } else {
        console.error('‚ùå „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Ç®„É©„Éº:', error);
        throw new Error('„Éá„Éº„Çø„Éô„Éº„Çπ„Å´Êé•Á∂ö„Åß„Åç„Åæ„Åõ„Çì„ÄÇÁí∞Â¢ÉÂ§âÊï∞„Å®„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      }
    }
    
    console.log('‚úÖ „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂öÊàêÂäü');
  } catch (error) {
    console.error('‚ùå „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„ÉÜ„Çπ„ÉàÂ§±Êïó:', error);
    throw error;
  }
}

async function migrateProducts() {
  console.log('\nüì¶ ÂïÜÂìÅ„Éá„Éº„Çø„ÇíÁßªË°å‰∏≠...');
  
  const dataDir = path.join(__dirname, '../src/data/products');
  
  try {
    // „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÂ≠òÂú®Á¢∫Ë™ç
    try {
      await fs.access(dataDir);
    } catch (error) {
      console.log('üìÅ ÂïÜÂìÅ„Éá„Éº„Çø„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô„ÄÇ');
      return;
    }

    const categories = await fs.readdir(dataDir);
    
    for (const category of categories) {
      const categoryPath = path.join(dataDir, category);
      const stat = await fs.stat(categoryPath);
      
      if (stat.isDirectory()) {
        const files = await fs.readdir(categoryPath);
        
        for (const file of files) {
          if (file.endsWith('.json')) {
            const shopName = file.replace('.json', '');
            const filePath = path.join(categoryPath, file);
            
            console.log(`  üìÑ ${category}/${shopName} „ÇíÂá¶ÁêÜ‰∏≠...`);
            
            try {
              // JSON„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
              const fileContent = await fs.readFile(filePath, 'utf-8');
              const shopData = JSON.parse(fileContent);
              
              // „Ç∑„Éß„ÉÉ„ÉóÊÉÖÂ†±„ÇíÁ¢∫‰øù
              const { data: shop, error: shopError } = await supabase
                .from('shops')
                .upsert({
                  category: category,
                  name: shopName,
                  display_name: shopName.toUpperCase(),
                  last_updated: shopData.lastUpdated || new Date().toISOString()
                }, {
                  onConflict: 'category,name'
                })
                .select()
                .single();
              
              if (shopError || !shop) {
                console.error(`    ‚ùå „Ç∑„Éß„ÉÉ„Éó‰ΩúÊàê/ÂèñÂæó„Ç®„É©„Éº: ${category}/${shopName}`);
                console.error(`    „Ç®„É©„ÉºË©≥Á¥∞:`, shopError);
                continue;
              }
              
              console.log(`    ‚úÖ „Ç∑„Éß„ÉÉ„ÉóÁ¢∫Ë™ç: ${shop.display_name}`);
              
              // Êó¢Â≠ò„ÅÆÂïÜÂìÅ„ÇíÂâäÈô§
              const { error: deleteError } = await supabase
                .from('products')
                .delete()
                .eq('shop_id', shop.id);
              
              if (deleteError) {
                console.error(`    ‚ùå Êó¢Â≠òÂïÜÂìÅÂâäÈô§„Ç®„É©„Éº:`, deleteError);
              }
              
              // ÂïÜÂìÅ„Éá„Éº„Çø„ÇíÊåøÂÖ•
              let productCount = 0;
              const products = shopData.products || [];
              
              for (const product of products) {
                try {
                  // ÂøÖÈ†à„Éï„Ç£„Éº„É´„Éâ„ÅÆÊ§úË®º
                  if (!product.name || typeof product.price !== 'number') {
                    console.warn(`    ‚ö†Ô∏è ÁÑ°Âäπ„Å™ÂïÜÂìÅ„Éá„Éº„Çø„Çí„Çπ„Ç≠„ÉÉ„Éó:`, product.name || 'unnamed');
                    continue;
                  }

                  // ÂïÜÂìÅ„ÇíÊåøÂÖ•
                  const { data: insertedProduct, error: productError } = await supabase
                    .from('products')
                    .insert({
                      shop_id: shop.id,
                      name: product.name,
                      image_url: product.imageUrl || '',
                      price: product.price,
                      sale_price: product.salePrice || null,
                      hidden: product.hidden || false,
                      memo: product.memo || '',
                      updated_at: product.updatedAt || new Date().toISOString(),
                    })
                    .select()
                    .single();
                  
                  if (productError) {
                    console.error(`    ‚ùå ÂïÜÂìÅÊåøÂÖ•„Ç®„É©„Éº (${product.name}):`, productError.message);
                    continue;
                  }
                  
                  // ASINÊÉÖÂ†±„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÂá¶ÁêÜ
                  if (product.asins && Array.isArray(product.asins) && product.asins.length > 0) {
                    for (const asinInfo of product.asins) {
                      try {
                        // ASINÊÉÖÂ†±„ÅÆÊ§úË®º
                        if (!asinInfo.asin || !asinInfo.brand) {
                          console.warn(`    ‚ö†Ô∏è ÁÑ°Âäπ„Å™ASINÊÉÖÂ†±„Çí„Çπ„Ç≠„ÉÉ„Éó:`, asinInfo.asin || 'no-asin');
                          continue;
                        }

                        // ASINÊÉÖÂ†±„Çíupsert
                        const { data: insertedAsin, error: asinError } = await supabase
                          .from('asin_info')
                          .upsert({
                            asin: asinInfo.asin,
                            url: asinInfo.url || `https://amazon.co.jp/dp/${asinInfo.asin}`,
                            product_name: asinInfo.productName || '',
                            brand: asinInfo.brand,
                            price: asinInfo.price || 0,
                            sold_unit: asinInfo.soldUnit || 0,
                            selling_fee: asinInfo.sellingFee || null,
                            fba_fee: asinInfo.fbaFee || null,
                            jan_codes: Array.isArray(asinInfo.jan) ? asinInfo.jan : [],
                            note: asinInfo.note || '',
                            is_dangerous_goods: asinInfo.isDangerousGoods || false,
                            is_partner_carrier_unavailable: asinInfo.isPartnerCarrierUnavailable || false,
                            has_official_store: asinInfo.hasOfficialStore || false,
                            has_amazon_store: asinInfo.hasAmazonStore || false,
                            complaint_count: asinInfo.complaintCount || 0,
                          }, {
                            onConflict: 'asin'
                          })
                          .select()
                          .single();
                        
                        if (asinError) {
                          console.error(`    ‚ùå ASINÊÉÖÂ†±upsert„Ç®„É©„Éº (${asinInfo.asin}):`, asinError.message);
                          continue;
                        }
                        
                        // ÂïÜÂìÅ„Å®ASIN„ÅÆÈñ¢ÈÄ£„Çí‰ΩúÊàê
                        const { error: relationError } = await supabase
                          .from('product_asins')
                          .upsert({
                            product_id: insertedProduct.id,
                            asin_id: insertedAsin.id,
                          }, {
                            onConflict: 'product_id,asin_id'
                          });

                        if (relationError) {
                          console.error(`    ‚ùå ÂïÜÂìÅ-ASINÈñ¢ÈÄ£„Ç®„É©„Éº:`, relationError.message);
                        }
                      } catch (asinProcessError) {
                        console.error(`    ‚ùå ASINÂá¶ÁêÜ„Ç®„É©„Éº (${asinInfo.asin}):`, asinProcessError.message);
                      }
                    }
                  }
                  
                  productCount++;
                } catch (productProcessError) {
                  console.error(`    ‚ùå ÂïÜÂìÅÂá¶ÁêÜ„Ç®„É©„Éº (${product.name}):`, productProcessError.message);
                }
              }
              
              console.log(`    ‚úÖ ${productCount}‰ª∂„ÅÆÂïÜÂìÅ„ÇíÁßªË°å„Åó„Åæ„Åó„Åü`);
            } catch (fileError) {
              console.error(`    ‚ùå „Éï„Ç°„Ç§„É´Âá¶ÁêÜ„Ç®„É©„Éº (${filePath}):`, fileError.message);
            }
          }
        }
      }
    }
  } catch (error) {
    console.error('ÂïÜÂìÅ„Éá„Éº„ÇøÁßªË°å„Ç®„É©„Éº:', error);
    throw error;
  }
}

async function migrateAsinData() {
  console.log('\nüè∑Ô∏è  ASIN„Éá„Éº„Çø„ÇíÁßªË°å‰∏≠...');
  
  const asinDir = path.join(__dirname, '../src/data/asin');
  
  try {
    // „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÂ≠òÂú®Á¢∫Ë™ç
    try {
      await fs.access(asinDir);
    } catch (error) {
      console.log('üìÅ ASIN„Éá„Éº„Çø„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô„ÄÇ');
      return;
    }

    const files = await fs.readdir(asinDir);
    
    for (const file of files) {
      if (file.endsWith('.json')) {
        const brand = file.replace('.json', '');
        const filePath = path.join(asinDir, file);
        
        console.log(`  üìÑ ${brand} ASIN„Éá„Éº„Çø„ÇíÂá¶ÁêÜ‰∏≠...`);
        
        try {
          // JSON„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
          const fileContent = await fs.readFile(filePath, 'utf-8');
          const asinList = JSON.parse(fileContent);
          
          if (!Array.isArray(asinList)) {
            console.warn(`    ‚ö†Ô∏è ASIN„Éá„Éº„Çø„ÅåÈÖçÂàó„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì: ${brand}`);
            continue;
          }

          let asinCount = 0;
          for (const asinInfo of asinList) {
            try {
              // ASINÊÉÖÂ†±„ÅÆÊ§úË®º
              if (!asinInfo.asin || !asinInfo.brand) {
                console.warn(`    ‚ö†Ô∏è ÁÑ°Âäπ„Å™ASINÊÉÖÂ†±„Çí„Çπ„Ç≠„ÉÉ„Éó:`, asinInfo.asin || 'no-asin');
                continue;
              }

              // ASINÊÉÖÂ†±„Çíupsert
              const { error } = await supabase
                .from('asin_info')
                .upsert({
                  asin: asinInfo.asin,
                  url: asinInfo.url || `https://amazon.co.jp/dp/${asinInfo.asin}`,
                  product_name: asinInfo.productName || '',
                  brand: asinInfo.brand,
                  price: asinInfo.price || 0,
                  sold_unit: asinInfo.soldUnit || 0,
                  selling_fee: asinInfo.sellingFee || null,
                  fba_fee: asinInfo.fbaFee || null,
                  jan_codes: Array.isArray(asinInfo.jan) ? asinInfo.jan : [],
                  note: asinInfo.note || '',
                  is_dangerous_goods: asinInfo.isDangerousGoods || false,
                  is_partner_carrier_unavailable: asinInfo.isPartnerCarrierUnavailable || false,
                  has_official_store: asinInfo.hasOfficialStore || false,
                  has_amazon_store: asinInfo.hasAmazonStore || false,
                  complaint_count: asinInfo.complaintCount || 0,
                }, {
                  onConflict: 'asin'
                });
              
              if (error) {
                console.error(`    ‚ùå ASINÊÉÖÂ†±upsert„Ç®„É©„Éº (${asinInfo.asin}):`, error.message);
                continue;
              }
              
              asinCount++;
            } catch (asinProcessError) {
              console.error(`    ‚ùå ASINÂá¶ÁêÜ„Ç®„É©„Éº (${asinInfo.asin}):`, asinProcessError.message);
            }
          }
          
          console.log(`    ‚úÖ ${asinCount}‰ª∂„ÅÆASINÊÉÖÂ†±„ÇíÁßªË°å„Åó„Åæ„Åó„Åü`);
        } catch (fileError) {
          console.error(`    ‚ùå „Éï„Ç°„Ç§„É´Âá¶ÁêÜ„Ç®„É©„Éº (${filePath}):`, fileError.message);
        }
      }
    }
  } catch (error) {
    console.error('ASIN„Éá„Éº„ÇøÁßªË°å„Ç®„É©„Éº:', error);
    throw error;
  }
}

// „Çπ„ÇØ„É™„Éó„ÉàÂÆüË°å
migrateData();